<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.Core</name>
    </assembly>
    <members>
        <member name="P:ICSharpCode.Core.AddIn.CustomErrorMessage">
            <summary>
            Gets the message of a custom load error. Used only when AddInAction is set to CustomError.
            Settings this property to a non-null value causes Enabled to be set to false and
            Action to be set to AddInAction.CustomError.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.AddIn.Action">
            <summary>
            Action to execute when the application is restarted.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AddInLoadException">
            <summary>
            Exception used when loading an AddIn fails.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.CoreException">
            <summary>
            Base class for exceptions thrown by the SharpDevelop core.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.Codon">
            <summary>
            Represents a node in the add in tree that can produce an item.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.NegatedCondition">
            <summary>
            Negates a condition
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ICondition">
            <summary>
            Interface for single condition or complex condition.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.ICondition.IsValid(System.Object)">
            <summary>
            Returns true, when the condition is valid otherwise false.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.ICondition.Action">
            <summary>
            Returns the action which occurs, when this condition fails.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AndCondition">
            <summary>
            Gives back the and result of two conditions.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.OrCondition">
            <summary>
            Gives back the or result of two conditions.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.Condition.Action">
            <summary>
            Returns the action which occurs, when this condition fails.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ExtensionPath">
            <summary>
            Description of Path.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IConditionEvaluator">
            <summary>
            Interface for classes that can evaluate conditions defined in the addin tree.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ConditionFailedAction">
            <summary>
            Default actions, when a condition is failed.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IDoozer">
            <summary>
            Interface for classes that can build objects out of codons.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Fraggle_Rock#Doozers</remarks>
        </member>
        <member name="P:ICSharpCode.Core.IDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.CompareConditionEvaluator">
            <summary>
            Compares two strings.
            The strings are passed through the StringParser, so it is possible to compare
            SharpDevelop properties.<br/>
            Useful if you want to run a command only when a setting is active to prevent
            loading your addin if that setting isn't set.
            </summary>
            <attribute name="string">
            The first string.
            </attribute>
            <attribute name="equals">
            The second string.
            </attribute>
            <attribute name="comparisonType">
            The mode of the comparison: a field of the System.StringComparison enumeration. The default is
            'InvariantCultureIgnoreCase'.
            </attribute>
            <example title="Check the value of a property in the PropertyService">
            &lt;Condition name = "Compare" string = "${property:SharpDevelop.FiletypesRegisterStartup}" equals = "True"&gt;
            </example>
        </member>
        <member name="T:ICSharpCode.Core.LazyConditionEvaluator">
            <summary>
            Condition evaluator that lazy-loads another condition evaluator and executes it.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.OwnerStateConditionEvaluator">
            <summary>
            Condition evaluator that compares the state of the caller/owner with a specified value.
            The caller/owner has to implement <see cref="T:ICSharpCode.Core.IOwnerState"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ClassDoozer">
            <summary>
            Creates object instances by invocating a type's parameterless constructor
            via System.Reflection.
            </summary>
            <attribute name="class" use="required">
            The fully qualified type name of the class to create an instace of.
            </attribute>
            <usage>Everywhere where objects are expected.</usage>
            <returns>
            Any kind of object.
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.ClassDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.FileFilterDoozer">
            <summary>
            Creates file filter entries for OpenFileDialogs or SaveFileDialogs.
            </summary>
            <attribute name="name" use="required">
            The name of the file filter entry.
            </attribute>
            <attribute name="extensions" use="required">
            The extensions associated with this file filter entry.
            </attribute>
            <usage>Only in /SharpDevelop/Workbench/FileFilter</usage>
            <returns>
            String in the format "name|extensions".
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.FileFilterDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IconDoozer">
            <summary>
            Creates associations between file types or node types in the project browser and
            icons in the resource service.
            </summary>
            <attribute name="resource" use="required">
            The name of a bitmap resource in the resource service.
            </attribute>
            <attribute name="language">
            This attribute is specified when a project icon association should be created.
            It specifies the language of the project types that use the icon.
            </attribute>
            <attribute name="extensions">
            This attribute is specified when a file icon association should be created.
            It specifies the semicolon-separated list of file types that use the icon.
            </attribute>
            <usage>Only in /Workspace/Icons</usage>
            <returns>
            An IconDescriptor object that exposes the attributes.
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.IconDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.LazyLoadDoozer">
            <summary>
            This doozer lazy-loads another doozer when it has to build an item.
            It is used internally to wrap doozers specified in addins.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.LazyLoadDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AbstractCommand">
            <summary>
            Abstract implementation of the <see cref="T:ICSharpCode.Core.ICommand"/> interface.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ICommand">
            <summary>
            A basic command interface. A command has simply an owner which "runs" the command
            and a Run method which invokes the command.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.ICommand.Run">
            <summary>
            Invokes the command.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.ICommand.Owner">
            <summary>
            Returns the owner of the command.
            </summary>
        </member>
        <member name="E:ICSharpCode.Core.ICommand.OwnerChanged">
            <summary>
            Is called when the Owner property is changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AbstractCommand.Run">
            <summary>
            Invokes the command.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.AbstractCommand.Owner">
            <summary>
            Returns the owner of the command.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.MenuItemDoozer">
            <summary>
            Creates menu items from a location in the addin tree.
            </summary>
            <attribute name="label" use="required">
            Label of the menu item.
            </attribute>
            <attribute name="type" use="optional" enum="Separator;CheckBox;Item;Command;Menu;Builder">
            This attribute must be one of these values:
            Separator, CheckBox, Item=Command, Menu (=with subitems),
            Builder (=class implementing ISubmenuBuilder).
            Default: Command.
            </attribute>
            <attribute name="loadclasslazy" use="optional">
            Only for the type "Item"/"Command".
            When set to false, the command class is loaded
            immediately instead of the usual lazy-loading.
            </attribute>
            <attribute name="icon" use="optional">
            Icon of the menu item.
            </attribute>
            <attribute name="class" use="optional">
            Command class that is run when item is clicked.
            </attribute>
            <attribute name="link" use="optional">
            Only for the type "Item"/"Command". Opens a webpage instead of running a command when
            clicking the item.
            </attribute>
            <attribute name="shortcut" use="optional">
            Shortcut that activates the command (e.g. "Control|S").
            </attribute>
            <children childTypes="MenuItem">
            If "type" is "Menu", the item can have sub-menuitems.
            </children>
            <usage>Any menu strip paths or context menu paths, e.g. /SharpDevelop/Workbench/MainMenu</usage>
            <returns>
            Any ToolStrip* object, depending on the type attribute.
            </returns>
            <conditions>Conditions are handled by the item, "Exclude" maps to "Visible = false", "Disable" to "Enabled = false"</conditions>
        </member>
        <member name="P:ICSharpCode.Core.MenuItemDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ToolbarItemDoozer">
            <summary>
            Creates tool bar items from a location in the addin tree.
            </summary>
            <attribute name="label" use="optional">
            Label of the tool bar item.
            </attribute>
            <attribute name="icon" use="optional">
            Icon of the tool bar item.
            </attribute>
            <attribute name="type" use="optional" enum="Separator;CheckBox;Item;ComboBox;DropDownButton">
            This attribute must be one of these values:
            Separator, CheckBox, Item, ComboBox, DropDownButton
            </attribute>
            <attribute name="loadclasslazy" use="optional">
            Only for the type "Item". When set to false, the command class is loaded
            immediately instead of the usual lazy-loading.
            </attribute>
            <attribute name="tooltip" use="optional">
            Tooltip of the tool bar item.
            </attribute>
            <attribute name="class">
            Command class that is run when item is clicked; or class that manages
            the ComboBox/DropDownButton. Required for everything except "Separator".
            </attribute>
            <usage>Any toolbar strip paths, e.g. /SharpDevelop/Workbench/ToolBar</usage>
            <children childTypes="MenuItem">A drop down button has menu items as sub elements.</children>
            <returns>
            A ToolStrip* object, depending on the type attribute.
            </returns>
            <conditions>Conditions are handled by the item, "Exclude" maps to "Visible = false", "Disable" to "Enabled = false"</conditions>
        </member>
        <member name="P:ICSharpCode.Core.ToolbarItemDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AddInTree">
            <summary>
            Static class containing the AddInTree. Contains methods for accessing tree nodes and building items.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AddInTree.BuildItem(System.String,System.Object)">
            <summary>
            Builds a single item in the addin tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AddInTree.BuildItems(System.String,System.Object,System.Boolean)">
            <summary>
            Builds the items in the path.
            </summary>
            <param name="path">A path in the addin tree.</param>
            <param name="caller">The owner used to create the objects.</param>
            <param name="throwOnNotFound">If true, throws an TreePathNotFoundException
            if the path is not found. If false, an empty ArrayList is returned when the
            path is not found.</param>
        </member>
        <member name="M:ICSharpCode.Core.AddInTree.BuildItems``1(System.String,System.Object)">
            <summary>
            Builds the items in the path. Ensures that all items have the type T.
            Throws an exception if the path is not found.
            </summary>
            <param name="path">A path in the addin tree.</param>
            <param name="caller">The owner used to create the objects.</param>
        </member>
        <member name="M:ICSharpCode.Core.AddInTree.BuildItems``1(System.String,System.Object,System.Boolean)">
            <summary>
            Builds the items in the path. Ensures that all items have the type T.
            </summary>
            <param name="path">A path in the addin tree.</param>
            <param name="caller">The owner used to create the objects.</param>
            <param name="throwOnNotFound">If true, throws an TreePathNotFoundException
            if the path is not found. If false, an empty ArrayList is returned when the
            path is not found.</param>
        </member>
        <member name="T:ICSharpCode.Core.AddInTreeNode">
            <summary>
            Description of AddInTreeNode.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.TreePathNotFoundException">
            <summary>
            Is thrown when the AddInTree could not find the requested path.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.TreePathNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:ICSharpCode.Core.TreePathNotFoundException"/>
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.FileNameEventArgs">
            <summary>
            Description of FileEventHandler.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.FileUtility">
            <summary>
            A utility class related to file utilities.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.FileUtility.GetRelativePath(System.String,System.String)">
            <summary>
            Converts a given absolute path and a given base path to a path that leads
            from the base path to the absoulte path. (as a relative path)
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.FileUtility.GetAbsolutePath(System.String,System.String)">
            <summary>
            Converts a given relative path and a given base path to a path that leads
            to the relative path absoulte.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.FileUtility.SearchDirectory(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Finds all files which are valid to the mask <paramref name="filemask"/> in the path
            <paramref name="directory"/> and all subdirectories
            (if <paramref name="searchSubdirectories"/> is true).
            The found files are added to the List&lt;string&gt;
            <paramref name="collection"/>.
            If <paramref name="ignoreHidden"/> is true, hidden files and folders are ignored.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.FileUtility.IsValidFileName(System.String)">
            <summary>
            This method checks the file fileName if it is valid.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.FileUtility.IsValidDirectoryName(System.String)">
            <summary>
            Checks that a single directory name (not the full path) is valid.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.FileUtility.NETFrameworkInstallRoot">
            <summary>
            Gets the installation root of the .NET Framework (@"C:\Windows\Microsoft.NET\Framework\")
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.FileUtility.NetSdkInstallRoot">
            <summary>
            Gets the Windows Vista SDK installation root. If the Vista SDK is not installed, the
            .NET 2.0 SDK installation root is returned. If both are not installed, an empty string is returned.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.SaveErrorChooseDialog">
            <summary>
                Add summary description for SaveErrorChooseDialog
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.SaveErrorChooseDialog.InitializeComponents(System.Boolean)">
            <summary>
                This method was autogenerated - do not change the contents manually
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.SaveErrorInformDialog">
            <summary>
                Add summary description for SaveErrorInformDialog
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.SaveErrorInformDialog.InitializeComponent2">
            <summary>
                This method was autogenerated - do not change the contents manually
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.CustomDialog.MyInitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.CustomDialog.Result">
            <summary>
            Gets the index of the button pressed.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.MessageService">
            <summary>
            Class with static methods to show message boxes.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.MessageService.CustomErrorReporter">
            <summary>
            Gets/Sets the custom error reporter. If this property is null, the default
            messagebox is used.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IMementoCapable">
            <summary>
            This interface flags an object beeing "mementocapable". This means that the
            state of the object could be saved to an <see cref="T:ICSharpCode.Core.Properties"/> object
            and set from a object from the same class.
            This is used to save and restore the state of GUI objects.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.IMementoCapable.CreateMemento">
            <summary>
            Creates a new memento from the state.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.IMementoCapable.SetMemento(ICSharpCode.Core.Properties)">
            <summary>
            Sets the state to the given memento.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.Properties">
            <summary>
            Description of PropertyGroup.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.PropertyChangedEventArgs.Properties">
            <returns>
            returns the changed property object
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.PropertyChangedEventArgs.Key">
            <returns>
            The key of the changed property
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.PropertyChangedEventArgs.NewValue">
            <returns>
            The new value of the property
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.PropertyChangedEventArgs.OldValue">
            <returns>
            The new value of the property
            </returns>
        </member>
        <member name="T:ICSharpCode.Core.ResourceNotFoundException">
            <summary>
            Is thrown when the GlobalResource manager can't find a requested
            resource.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ResourceService">
            <summary>
            This Class contains two ResourceManagers, which handle string and image resources
            for the application. It do handle localization strings on this level.
            </summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.strings">
            <summary>English strings (list of resource managers)</summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.icons">
            <summary>Neutral/English images (list of resource managers)</summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.localStrings">
            <summary>Hashtable containing the local strings from the main application.</summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.localStringsResMgrs">
            <summary>Strings resource managers for the current language</summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.localIconsResMgrs">
            <summary>Image resource managers for the current language</summary>
        </member>
        <member name="F:ICSharpCode.Core.ResourceService.resourceAssemblies">
            <summary>List of ResourceAssembly</summary>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.RegisterStrings(System.String,System.Reflection.Assembly)">
            <summary>
            Registers string resources in the resource service.
            </summary>
            <param name="baseResourceName">The base name of the resource file embedded in the assembly.</param>
            <param name="assembly">The assembly which contains the resource file.</param>
            <example><c>ResourceService.RegisterStrings("TestAddin.Resources.StringResources", GetType().Assembly);</c></example>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.RegisterImages(System.String,System.Reflection.Assembly)">
            <summary>
            Registers image resources in the resource service.
            </summary>
            <param name="baseResourceName">The base name of the resource file embedded in the assembly.</param>
            <param name="assembly">The assembly which contains the resource file.</param>
            <example><c>ResourceService.RegisterImages("TestAddin.Resources.BitmapResources", GetType().Assembly);</c></example>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadDefaultMonospacedFont(System.Drawing.FontStyle)">
            <summary>
            Loads the default monospaced font (Consolas or Courier New).
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadFont(System.String,System.Int32)">
            <summary>
            The LoadFont routines provide a safe way to load fonts.
            </summary>
            <param name="fontName">The name of the font to load.</param>
            <param name="size">The size of the font to load.</param>
            <returns>
            The font to load or the menu font, if the requested font couldn't be loaded.
            </returns>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadFont(System.String,System.Int32,System.Drawing.FontStyle)">
            <summary>
            The LoadFont routines provide a safe way to load fonts.
            </summary>
            <param name="fontName">The name of the font to load.</param>
            <param name="size">The size of the font to load.</param>
            <param name="style">The <see cref="T:System.Drawing.FontStyle"/> of the font</param>
            <returns>
            The font to load or the menu font, if the requested font couldn't be loaded.
            </returns>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadFont(System.String,System.Int32,System.Drawing.GraphicsUnit)">
            <summary>
            The LoadFont routines provide a safe way to load fonts.
            </summary>
            <param name="fontName">The name of the font to load.</param>
            <param name="size">The size of the font to load.</param>
            <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit"/> of the font</param>
            <returns>
            The font to load or the menu font, if the requested font couldn't be loaded.
            </returns>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadFont(System.String,System.Int32,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary>
            The LoadFont routines provide a safe way to load fonts.
            </summary>
            <param name="fontName">The name of the font to load.</param>
            <param name="size">The size of the font to load.</param>
            <param name="style">The <see cref="T:System.Drawing.FontStyle"/> of the font</param>
            <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit"/> of the font</param>
            <returns>
            The font to load or the menu font, if the requested font couldn't be loaded.
            </returns>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.LoadFont(System.Drawing.Font,System.Drawing.FontStyle)">
            <summary>
            The LoadFont routines provide a safe way to load fonts.
            </summary>
            <param name="baseFont">The existing font from which to create the new font.</param>
            <param name="newStyle">The new style of the font.</param>
            <returns>
            The font to load or the baseFont (if the requested font couldn't be loaded).
            </returns>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.GetString(System.String)">
            <summary>
            Returns a string from the resource database, it handles localization
            transparent for the user.
            </summary>
            <returns>
            The string in the (localized) resource database.
            </returns>
            <param name="name">
            The name of the requested resource.
            </param>
            <exception cref="T:ICSharpCode.Core.ResourceNotFoundException">
            Is thrown when the GlobalResource manager can't find a requested resource.
            </exception>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.GetIcon(System.String)">
            <summary>
            Returns a icon from the resource database, it handles localization
            transparent for the user. In the resource database can be a bitmap
            instead of an icon in the dabase. It is converted automatically.
            </summary>
            <returns>
            The icon in the (localized) resource database, or null, if the icon cannot
            be found.
            </returns>
            <param name="name">
            The name of the requested icon.
            </param>
        </member>
        <member name="M:ICSharpCode.Core.ResourceService.GetBitmap(System.String)">
            <summary>
            Returns a bitmap from the resource database, it handles localization
            transparent for the user.
            </summary>
            <returns>
            The bitmap in the (localized) resource database.
            </returns>
            <param name="name">
            The name of the requested bitmap.
            </param>
            <exception cref="T:ICSharpCode.Core.ResourceNotFoundException">
            Is thrown when the GlobalResource manager can't find a requested resource.
            </exception>
        </member>
        <member name="T:ICSharpCode.Core.StringParser">
            <summary>
            this class parses internal ${xyz} tags of sd.
            All environment variables are avaible under the name env.[NAME]
            where [NAME] represents the string under which it is avaiable in
            the environment.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.StringParser.Parse(System.String[])">
            <summary>
            Parses an array and replaces the elements in the existing array.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.StringParser.Parse(System.String,System.String[0:,0:])">
            <summary>
            Expands ${xyz} style property values.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.StringParser.GetProperty(System.String)">
            <summary>
            Allow special syntax to retrieve property values:
            ${property:PropertyName}
            ${property:PropertyName??DefaultValue}
            ${property:ContainerName/PropertyName}
            ${property:ContainerName/PropertyName??DefaultValue}
            A container is a Properties instance stored in the PropertyService. This is
            used by many AddIns to group all their properties into one container.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.RightToLeftConverter">
            <summary>
            Description of RightToLeftConverter.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.RightToLeftConverter.Mirror(System.Windows.Forms.Control)">
            <summary>
            Mirrors a control and its child controls if right to left is activated.
            Call this only for controls that aren't mirrored automatically by .NET!
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.InputBox">
            <summary>
            Description of InputBox.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.InputBox.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IBuildItemsModifier">
            <summary>
            When a <see cref="T:ICSharpCode.Core.IDoozer">doozer</see> returns an object implementing
            this interface, the <see cref="M:ICSharpCode.Core.IBuildItemsModifier.Apply(System.Collections.IList)"/> method is called on the list of items
            that has been built.
            This interface can be used to support special <see cref="T:ICSharpCode.Core.IDoozer">doozers</see>
            that do not simply build one item but want to modify the list of items built so far.
            Example use is the <see cref="T:ICSharpCode.Core.IncludeDoozer"/> which uses this interface to return
            multiple items instead of one.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.IncludeDoozer">
            <summary>
            Includes one or multiple items from another location in the addin tree.
            You can use the attribute "item" (to include a single item) OR the
            attribute "path" (to include all items from the target path).
            </summary>
            <attribute name="item">
            When this attribute is used, the include doozer builds the item that is at the
            addin tree location specified by this attribute.
            </attribute>
            <attribute name="path">
            When this attribute is used, the include doozer builds all items inside the
            path addin tree location specified by this attribute and returns an
            <see cref="T:ICSharpCode.Core.IBuildItemsModifier"/> which includes all items in the output list.
            </attribute>
            <usage>Everywhere</usage>
            <returns>
            Any object, depending on the included codon(s).
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.IncludeDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.ClipboardWrapper">
            <summary>
            Helper class to access the clipboard without worrying about ExternalExceptions
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AddInManifest">
            <summary>
            Stores information about the manifest of an AddIn.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AddInReference">
            <summary>
            Represents a versioned reference to an AddIn. Used by <see cref="T:ICSharpCode.Core.AddInManifest"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AddInReference.Check(System.Collections.Generic.Dictionary{System.String,System.Version},System.Version@)">
            <returns>Returns true when the reference is valid.</returns>
        </member>
        <member name="M:ICSharpCode.Core.AddInReference.CompareVersion(System.Version,System.Version)">
            <summary>
            Compares two versions and ignores unspecified fields (unlike Version.CompareTo)
            </summary>
            <returns>-1 if a &lt; b, 0 if a == b, 1 if a &gt; b</returns>
        </member>
        <member name="T:ICSharpCode.Core.CoreStartup">
            <summary>
            Class that helps starting up ICSharpCode.Core.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.CoreStartup.AddAddInsFromDirectory(System.String)">
            <summary>
            Find AddIns by searching all .addin files recursively in <paramref name="addInDir"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.CoreStartup.AddAddInFile(System.String)">
            <summary>
            Add the specified .addin file.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.CoreStartup.PropertiesName">
            <summary>
            Sets the name used for the properties (only name, without path or extension).
            Must be set before StartCoreServices() is called.
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.CoreStartup.ConfigDirectory">
            <summary>
            Sets the directory name used for the property service.
            Must be set before StartCoreServices() is called.
            Use null to use the default path "ApplicationData\ApplicationName".
            </summary>
        </member>
        <member name="P:ICSharpCode.Core.CoreStartup.DataDirectory">
            <summary>
            Sets the data directory used to load resources.
            Must be set before StartCoreServices() is called.
            Use null to use the default path "ApplicationRootPath\data".
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AddInManager.InstallAddIns(System.Collections.Generic.List{System.String})">
            <summary>
            Installs the AddIns from AddInInstallTemp to the UserAddInPath.
            In case of installation errors, a error message is displayed to the user
            and the affected AddIn is added to the disabled list.
            </summary>
        </member>
        <member name="M:ICSharpCode.Core.AddInManager.LoadAddInConfiguration(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads a configuration file.
            The 'file' from XML elements in the form "&lt;AddIn file='full path to .addin file'&gt;" will
            be added to <paramref name="addInFiles"/>, the 'addin' element from
            "&lt;Disable addin='addin identity'&gt;" will be added to <paramref name="disabledAddIns"/>,
            all other XML elements are ignored.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.StringDoozer">
            <summary>
            Creates a string.
            </summary>
            <attribute name="text" use="required">
            The string to return.
            </attribute>
            <returns>
            The string specified by 'text', passed through the StringParser.
            </returns>
        </member>
        <member name="P:ICSharpCode.Core.StringDoozer.HandleConditions">
            <summary>
            Gets if the doozer handles codon conditions on its own.
            If this property return false, the item is excluded when the condition is not met.
            </summary>
        </member>
        <member name="T:ICSharpCode.Core.AppDomainLaunchHelper">
            <summary>
            Because AddIn assemblies are loaded into the LoadFrom context, creating AppDomains in them that
            use an arbitrary ApplicationBase path does not work correctly.
            This class contains a static method that helps launching a static method on a type in a new AppDomain.
            </summary>
            <example>
             <code>
             public static class CurrentClass { // is NOT MarshalByRef
              public static ResultClass[] GetResults()
              {
               AppDomainSetup setup = new AppDomainSetup();
               setup.ApplicationBase = myApplicationBase;
               AppDomain domain = AppDomain.CreateDomain("Display name for domain", AppDomain.CurrentDomain.Evidence, setup);
               try {
                 return (ResultClass[])AppDomainLaunchHelper.LaunchInAppDomain(domain, typeof(CurrentClass), "GetResultsDirectly", requestObject);
               } finally {
                 AppDomain.Unload(domain);
               }
              }
              public static ResultClass[] GetResultsDirectly(Request requestObject) { ... }
             }
             [Serializable] class Request { ... }  // must be serializable !!!
             [Serializable] class ResultClass { ... }  // must be serializable !!!
            </code></example>
        </member>
    </members>
</doc>
